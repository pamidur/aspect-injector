<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AspectInjector_Enabled Condition="'$(AspectInjector_Enabled)' == ''">true</AspectInjector_Enabled>
    <AspectInjector_Debug Condition="'$(AspectInjector_Debug)' == ''">false</AspectInjector_Debug>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Update="AspectInjector" PrivateAssets="None" />
  </ItemGroup>

  <PropertyGroup>
    <_InjectAspectsDependsOn>
      _ASI_Custom_Target;
      _ASI_CheckAssemblyChanged;
      _ASI_InjectAspectsCore;
      _ASI_ResignAssembly;
      _ASI_TouchTimestampFile
    </_InjectAspectsDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(AspectInjector_Location)' == ''">
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('OSX'))">$(MSBuildThisFileDirectory)../../build/_bin/osx-x64/AspectInjector</AspectInjector_Location>
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(MSBuildThisFileDirectory)../../build/_bin/win-x64/AspectInjector.exe</AspectInjector_Location>
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('Linux')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64' AND !Exists('/lib/libc.musl-x86_64.so.1')">$(MSBuildThisFileDirectory)../../build/_bin/linux-x64/AspectInjector</AspectInjector_Location>
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('Linux')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64' AND Exists('/lib/libc.musl-x86_64.so.1')">$(MSBuildThisFileDirectory)../../build/_bin/linux-musl-x64/AspectInjector</AspectInjector_Location>
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('Linux')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'Arm64' AND !Exists('/lib/libc.musl-aarch64.so.1')">$(MSBuildThisFileDirectory)../../build/_bin/linux-arm64/AspectInjector</AspectInjector_Location>
    <AspectInjector_Location Condition="$([MSBuild]::IsOSPlatform('Linux')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'Arm64' AND Exists('/lib/libc.musl-aarch64.so.1')">$(MSBuildThisFileDirectory)../../build/_bin/linux-musl-arm64/AspectInjector</AspectInjector_Location>
  </PropertyGroup>

  <PropertyGroup>
    <_ASI_DelayedInjection Condition="'$(_ASI_DelayedInjection)' == ''">false</_ASI_DelayedInjection>
    <_ASI_RefsFileExt>._asi_refs</_ASI_RefsFileExt>
  </PropertyGroup>

  <Target Name="InjectAspects" AfterTargets="CoreCompile" BeforeTargets="_TimeStampAfterCompile;AfterCompile" Condition="'$(AspectInjector_Enabled)' == 'true'" DependsOnTargets="$(_InjectAspectsDependsOn)"/>

  <Target Name="_ASI_InjectAspectsCore" Condition="'$(_InjectionNeeded)' == 'true'">
    <PropertyGroup>
      <_CmdParams Condition=" '$(Optimize)' == 'true' ">$(_CmdParams) -o</_CmdParams>
      <_CmdParams Condition=" '$(AspectInjector_Debug)' == 'true' ">$(_CmdParams) -d</_CmdParams>
      <_CmdParams Condition=" '$(_ASI_Verbose)' == 'true' ">$(_CmdParams) -v</_CmdParams>
    </PropertyGroup>
    <PropertyGroup>
      <_ProcessCmd>&quot;$(AspectInjector_Location)&quot;$(_CmdParams) -rf &quot;%(IntermediateAssembly.FullPath)$(_ASI_RefsFileExt)&quot; &quot;@(IntermediateAssembly->'%(FullPath)')&quot;</_ProcessCmd>
    </PropertyGroup>

    <Message Condition=" '$(AspectInjector_Debug)' == 'true' " Importance="high" Text="$(_ProcessCmd)"/>

    <Exec Command="$(_ProcessCmd)" WorkingDirectory="$(MSBuildThisFileDirectory)" EchoOff="true" IgnoreExitCode="true" Condition="'$(_ASI_DelayedInjection)' == 'false'">
      <Output TaskParameter="ExitCode" PropertyName="_AspectExitCode" />
    </Exec>

    <Error Text="Aspect Injector processing has failed. See other errors." Condition="'$(_AspectExitCode)' != '0' AND '$(_ASI_DelayedInjection)' == 'false'" Code="AI_FAIL"  File="AspectInjector"/>
  </Target>

  <Target Name="_ASI_ResignAssembly" Condition="'$(SignAssembly)' == 'true' AND '$(DelaySign)' != 'true' AND '$(_InjectionNeeded)' == 'true' " DependsOnTargets="GetSnToolForUnix;GetSnToolForWindows">
    <PropertyGroup>
      <_SignCommand Condition="'$(KeyContainerName)' != ''">&quot;$(SnTool)&quot; -Rc &quot;$(ProjectDir)$(IntermediateOutputPath)$(TargetFileName)&quot; $(KeyContainerName)</_SignCommand>
      <_SignCommand Condition="'$(KeyContainerName)' == '' AND '$(KeyOriginatorFile)' != ''">&quot;$(SnTool)&quot; -R &quot;$(ProjectDir)$(IntermediateOutputPath)$(TargetFileName)&quot; $(KeyOriginatorFile)</_SignCommand>
    </PropertyGroup>
    <Exec Command="$(_SignCommand)" Condition="'$(_SignCommand)' != ''" EchoOff="true" IgnoreExitCode="true">
      <Output TaskParameter="ExitCode" PropertyName="_SignExitCode" />
    </Exec>
    <Error Text="Aspect Injector cannot re-sing assembly. Try rebuid solution." Condition="'$(_SignExitCode)' != '0'" Code="AI_ERR0" File="AspectInjector"/>
  </Target>

  <Target Name="_ASI_TouchTimestampFile" Condition="'$(_InjectionNeeded)' == 'true'">
    <Touch Files="%(IntermediateAssembly.FullPath)$(_ASI_RefsFileExt)" AlwaysCreate="true" Time="%(IntermediateAssembly.ModifiedTime)"/>
    <PropertyGroup>
      <_InjectionNeeded>false</_InjectionNeeded>
    </PropertyGroup>
  </Target>

  <Target Name="_ASI_CheckAssemblyChanged">
    <ItemGroup>
      <_TimeStampFiles Include="%(IntermediateAssembly.FullPath)$(_ASI_RefsFileExt)" />
    </ItemGroup>
    <PropertyGroup>
      <_TSOld>%(_TimeStampFiles.ModifiedTime)</_TSOld>
      <_TSNew>%(IntermediateAssembly.ModifiedTime)</_TSNew>
    </PropertyGroup>
    <PropertyGroup>
      <_InjectionNeeded Condition="'$(_TSOld)' != '$(_TSNew)' AND '$(_TSNew)' != '' ">true</_InjectionNeeded>
    </PropertyGroup>
    <WriteLinesToFile Condition="'$(_InjectionNeeded)' == 'true'"
			File="%(IntermediateAssembly.FullPath)$(_ASI_RefsFileExt)"
			Lines="@(ReferencePath->'%(FullPath)')"
			Overwrite="true"
			Encoding="Unicode"/>
    <Message Text="Assembly requires injection." Condition="'$(_InjectionNeeded)' == 'true'"/>
  </Target>

  <Target Name="GetSnToolForUnix" Condition=" '$(OS)' == 'Unix' ">
    <PropertyGroup>
      <SnTool>sn</SnTool>
    </PropertyGroup>
    <Message Text="SnTool found: $(SnTool)"/>
  </Target>

  <Target Name="GetSnToolForWindows" Condition=" '$(OS)' != 'Unix' ">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath" />
    </GetFrameworkSdkPath>
    <ItemGroup>
      <SnTools Include="$(WindowsSdkPath)**\sn.exe" />
    </ItemGroup>
    <PropertyGroup>
      <SnToolsRaw>@(SnTools)</SnToolsRaw>
    </PropertyGroup>
    <PropertyGroup>
      <SnTool>$(SnToolsRaw.Split(';')[0])</SnTool>
    </PropertyGroup>
    <Message Text="SnTool found: $(SnTool)"/>
  </Target>

  <Target Name="_ASI_Custom_Target">
  </Target>

</Project>

